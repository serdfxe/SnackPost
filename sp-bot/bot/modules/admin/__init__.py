# /sp-bot/bot/modules/subscription/__init__.py

from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from core.sp_clients import user_client
from core.sp_clients.sp_user.user_service_client.api.user import get_user_route_user_get
from core.sp_clients.sp_user.user_service_client.api.subscription import (
    get_subscription_route_subscription_get,
    create_subscription_route_subscription_post,
    delete_subscription_route_subscription_delete,
    check_subscription_route_subscription_check_get,
)
from core.sp_clients.sp_user.user_service_client.models import (
    SubscriptionCreateDTO,
)

from bot.filters.admin import IsAdmin


logger = logging.getLogger(__name__)
admin_router = Router(name="admin_router")


class SubscriptionStates(StatesGroup):
    """FSM states for subscription management"""

    waiting_for_user_id = State()
    waiting_for_duration = State()


@admin_router.message(Command("admin", "a"), IsAdmin())
async def handle_subscription_command(message: Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
    builder.button(text="–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="grant_sub")
    builder.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="revoke_sub")
    builder.adjust(1)

    await message.answer(
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</b>\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML",
    )


@admin_router.callback_query(F.data == "check_sub", IsAdmin())
async def handle_check_subscription(callback: CallbackQuery, state: FSMContext):
    """Handle subscription check request"""
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:")
    await state.set_state(SubscriptionStates.waiting_for_user_id)
    await state.update_data(action="check")
    await callback.answer()


@admin_router.callback_query(F.data == "grant_sub", IsAdmin())
async def handle_grant_subscription(callback: CallbackQuery, state: FSMContext):
    """Handle subscription grant request"""
    await callback.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏:")
    await state.set_state(SubscriptionStates.waiting_for_user_id)
    await state.update_data(action="grant")
    await callback.answer()


@admin_router.callback_query(F.data == "revoke_sub", IsAdmin())
async def handle_revoke_subscription(callback: CallbackQuery, state: FSMContext):
    """Handle subscription revoke request"""
    await callback.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:")
    await state.set_state(SubscriptionStates.waiting_for_user_id)
    await state.update_data(action="revoke")
    await callback.answer()


@admin_router.message(SubscriptionStates.waiting_for_user_id, F.text, IsAdmin())
async def handle_user_id_input(message: Message, state: FSMContext, bot: Bot):
    """Process user ID input for subscription actions"""
    try:
        user_id = int(message.text)
        state_data = await state.get_data()
        action = state_data.get("action")

        if action == "check":
            await check_user_subscription(message, user_id, bot)
        elif action == "grant":
            await state.update_data(user_id=user_id)
            await message.answer(
                "‚è≥ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30):"
            )
            await state.set_state(SubscriptionStates.waiting_for_duration)
            return
        elif action == "revoke":
            await revoke_user_subscription(message, user_id, bot)

        await state.clear()

    except ValueError:
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"Error in handle_user_id_input: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await state.clear()


@admin_router.message(SubscriptionStates.waiting_for_duration, F.text, IsAdmin())
async def handle_duration_input(message: Message, state: FSMContext, bot: Bot):
    """Process subscription duration input"""
    try:
        duration_days = int(message.text)
        if duration_days <= 0:
            raise ValueError("Duration must be positive")

        state_data = await state.get_data()
        user_id = state_data.get("user_id")

        await grant_user_subscription(message, user_id, duration_days, bot)
        await state.clear()

    except ValueError:
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30).")
    except Exception as e:
        logger.error(f"Error in handle_duration_input: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
        await state.clear()


async def check_user_subscription(message: Message, user_id: int, bot: Bot):
    """Check user subscription status"""
    try:
        # First check if user exists
        user_response = await get_user_route_user_get.asyncio(
            client=user_client, x_user_id=user_id
        )

        if not user_response:
            await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # Check subscription status
        sub_response = await check_subscription_route_subscription_check_get.asyncio(
            client=user_client, x_user_id=user_id
        )

        if sub_response:
            subscription = await get_subscription_route_subscription_get.asyncio(
                client=user_client, x_user_id=user_id
            )

            expires_at = (
                subscription.expires_at.strftime("%d.%m.%Y %H:%M")
                if subscription.expires_at
                else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            )
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if subscription.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"

            await message.reply(
                f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_response.first_name} (@{user_response.username})\n"
                f"üÜî ID: {user_id}\n"
                f"üîπ –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_at}",
                parse_mode="HTML",
            )
        else:
            await message.reply(
                f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_response.first_name} (@{user_response.username}) –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."
            )

    except Exception as e:
        if "404" in str(e):
            await message.reply(f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.")
        else:
            logger.error(f"Error checking subscription: {e}", exc_info=True)
            await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏")


async def grant_user_subscription(
    message: Message, user_id: int, duration_days: int, bot: Bot
):
    """Grant subscription to user"""
    try:
        from datetime import datetime, timedelta

        expires_at = datetime.now() + timedelta(days=duration_days)

        # First check if user exists
        user_response = await get_user_route_user_get.asyncio(
            client=user_client, x_user_id=user_id
        )

        if not user_response:
            await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # Create or update subscription
        sub_data = SubscriptionCreateDTO(
            user_id=user_id, is_active=True, expires_at=expires_at
        )

        response = await create_subscription_route_subscription_post.asyncio(
            client=user_client, body=sub_data
        )

        expires_at_str = expires_at.strftime("%d.%m.%Y %H:%M")
        await message.reply(
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_response.first_name} (@{user_response.username})\n"
            f"üÜî ID: {user_id}\n"
            f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_at_str}\n"
            f"‚è≥ –°—Ä–æ–∫: {duration_days} –¥–Ω–µ–π",
            parse_mode="HTML",
        )

        # Notify user
        try:
            await bot.send_message(
                user_id,
                f"üéâ –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {duration_days} –¥–Ω–µ–π!\n\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at_str}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
            )
        except Exception as e:
            logger.warning(f"Could not notify user {user_id}: {e}")

    except Exception as e:
        logger.error(f"Error granting subscription: {e}", exc_info=True)
        if "409" in str(e):
            await message.reply(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
        else:
            await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏")


async def revoke_user_subscription(message: Message, user_id: int, bot: Bot):
    """Revoke user subscription"""
    try:
        # First check if user exists
        user_response = await get_user_route_user_get.asyncio(
            client=user_client, x_user_id=user_id
        )

        if not user_response:
            await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # Check if subscription exists
        try:
            await get_subscription_route_subscription_get.asyncio(
                client=user_client, x_user_id=user_id
            )
        except Exception as e:
            if "404" in str(e):
                await message.reply(f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.")
                return
            raise

        # Delete subscription
        await delete_subscription_route_subscription_delete.asyncio(
            client=user_client, x_user_id=user_id
        )

        await message.reply(
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_response.first_name} (@{user_response.username})\n"
            f"üÜî ID: {user_id}",
            parse_mode="HTML",
        )

        # Notify user
        try:
            await bot.send_message(
                user_id,
                "‚ÑπÔ∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                "–í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
            )
        except Exception as e:
            logger.warning(f"Could not notify user {user_id}: {e}")

    except Exception as e:
        logger.error(f"Error revoking subscription: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏")
