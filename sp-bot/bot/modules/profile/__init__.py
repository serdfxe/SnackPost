from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
from datetime import datetime

from core.sp_clients import user_client
from core.sp_clients.sp_user.user_service_client.api.subscription import (
    get_subscription_route_subscription_get,
    check_subscription_route_subscription_check_get
)
from core.messages import (
    PROFILE_MSG,
    NO_SUBSCRIPTION_MSG,
    SUBSCRIPTION_INFO_MSG,
    PAYMENT_OPTIONS_MSG
)

from bot.filters.subscription import IsSubscribed

logger = logging.getLogger(__name__)
profile_router = Router(name="profile_router")

@profile_router.message(Command("profile", "p"))
async def handle_profile_command(message: Message):
    """Show user profile with subscription info"""
    try:
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
        # builder.button(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")
        builder.adjust(1)
        
        await message.answer(
            PROFILE_MSG,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in handle_profile_command: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")

@profile_router.callback_query(F.data == "check_subscription")
async def handle_check_subscription(callback: CallbackQuery):
    """Check user subscription status"""
    try:
        user_id = callback.from_user.id
        has_subscription = await check_subscription_route_subscription_check_get.asyncio(
            client=user_client,
            x_user_id=user_id
        )
        
        if has_subscription:
            subscription = await get_subscription_route_subscription_get.asyncio(
                client=user_client,
                x_user_id=user_id
            )
            
            expires_at = subscription.expires_at.strftime("%d.%m.%Y") if subscription.expires_at else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if subscription.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            
            await callback.message.edit_text(
                SUBSCRIPTION_INFO_MSG.format(
                    status=status,
                    expires_at=expires_at
                ),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                NO_SUBSCRIPTION_MSG,
                parse_mode="HTML"
            )
            
        # Show payment options if no active subscription
        # if not has_subscription:
        #     builder = InlineKeyboardBuilder()
        #     builder.button(text="1 –º–µ—Å—è—Ü - 299‚ÇΩ", callback_data="sub_1_month")
        #     builder.button(text="3 –º–µ—Å—è—Ü–∞ - 799‚ÇΩ", callback_data="sub_3_months")
        #     builder.button(text="1 –≥–æ–¥ - 2999‚ÇΩ", callback_data="sub_1_year")
        #     builder.adjust(1)
            
        #     await callback.message.answer(
        #         PAYMENT_OPTIONS_MSG,
        #         reply_markup=builder.as_markup(),
        #         parse_mode="HTML"
        #     )
            
    except Exception as e:
        logger.error(f"Error in handle_check_subscription: {e}", exc_info=True)
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏")

@profile_router.callback_query(F.data.startswith("sub_"))
async def handle_subscription_purchase(callback: CallbackQuery):
    """Handle subscription purchase"""
    try:
        # Here you would integrate with your payment provider
        # For now, we'll just show a message
        duration = {
            "sub_1_month": "1 –º–µ—Å—è—Ü",
            "sub_3_months": "3 –º–µ—Å—è—Ü–∞",
            "sub_1_year": "1 –≥–æ–¥"
        }.get(callback.data, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        
        await callback.message.edit_text(
            f"üí≥ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <b>{duration}</b>.\n\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n\n"
            "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            parse_mode="HTML"
        )
        
        # In a real implementation, you would:
        # 1. Create a payment invoice
        # 2. Send it to user
        # 3. Handle payment confirmation
        # 4. Activate subscription via API
        
    except Exception as e:
        logger.error(f"Error in handle_subscription_purchase: {e}", exc_info=True)
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
